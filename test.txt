class DriverMonitoringSystem:
    def __init__(self, camera_id=0):

        # flask init
        self.flask_app = None
        self.flask_server_thread = None
        self.flask_server_running = False
        self.flask_port = 5000

        # Initialize Flask app
        self._setup_flask_app()
        self.last_alert_time = 0
        self.ALERT_COOLDOWN = 5  # 5 seconds between alerts
        self.testt_process = None  # Track testt.py process
        self.testt_running = False  # Track if testt.py is running
        """
        Comprehensive Driver Monitoring System using MediaPipe (NO DLIB REQUIRED!)
        
        Args:
            camera_id: Camera device ID (0 for default webcam)
        """
        # Initialize camera
        self.cap = cv2.VideoCapture(camera_id)
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
        self.cap.set(cv2.CAP_PROP_FPS, 30)
        
        # Initialize MediaPipe Face Mesh (replaces dlib)
        self.mp_face_mesh = mp.solutions.face_mesh
        self.mp_drawing = mp.solutions.drawing_utils
        self.mp_drawing_styles = mp.solutions.drawing_styles
        
        self.face_mesh = self.mp_face_mesh.FaceMesh(
            max_num_faces=1,
            refine_landmarks=True,
            min_detection_confidence=0.7,
            min_tracking_confidence=0.5
        )
        
        # MediaPipe Face Detection for backup
        self.mp_face_detection = mp.solutions.face_detection
        self.face_detection = self.mp_face_detection.FaceDetection(
            model_selection=1, min_detection_confidence=0.7
        )
        
        # Eye landmark indices for MediaPipe (468 face landmarks)
        self.LEFT_EYE_LANDMARKS = [33, 7, 163, 144, 145, 153, 154, 155, 133, 173, 157, 158, 159, 160, 161, 246]
        self.RIGHT_EYE_LANDMARKS = [362, 382, 381, 380, 374, 373, 390, 249, 263, 466, 388, 387, 386, 385, 384, 398]
        self.MOUTH_LANDMARKS = [78, 95, 88, 178, 87, 14, 317, 402, 318, 324, 308, 415, 310, 311, 312, 13, 82, 81, 80, 91]
        
        # Simplified eye and mouth points for easier calculation
        self.LEFT_EYE_POINTS = [33, 160, 158, 133, 153, 144]  # Key eye landmarks
        self.RIGHT_EYE_POINTS = [362, 385, 387, 263, 373, 380]  # Key eye landmarks
        self.MOUTH_POINTS = [78, 81, 13, 311, 308, 415, 310, 317, 14, 87]  # Key mouth landmarks
        
        # FIXED THRESHOLDS - More reasonable values
        self.EYE_AR_THRESH = 0.2  # Lowered threshold
        self.EYE_AR_CONSEC_FRAMES = 15  # Increased frames needed
        self.MOUTH_AR_THRESH = 0.7  # Increased threshold
        self.YAWN_CONSEC_FRAMES = 20  # Increased frames needed
        self.MICROSLEEP_THRESH = 3.0  # Increased time threshold
        self.DROWSINESS_THRESH = 0.4  # More lenient threshold
        
        # State tracking variables
        self.eye_counter = 0
        self.yawn_counter = 0
        self.blink_counter = 0
        self.frame_counter = 0
        self.start_time = time.time()
        self.eyes_closed_start = None
        
        # Historical data for pattern analysis
        self.ear_history = deque(maxlen=100)
        self.mar_history = deque(maxlen=100)
        self.head_pose_history = deque(maxlen=50)
        self.consciousness_history = deque(maxlen=20)
        
        # Machine learning model
        self.scaler = StandardScaler()
        self.classifier = self._initialize_classifier()
        
        # Logging setup
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
        
        # State tracking
        self.current_state = DriverState(
            consciousness_level="CONSCIOUS",
            confidence=1.0,
            eye_aspect_ratio=0.3,
            mouth_aspect_ratio=0.3,
            head_pose=(0, 0, 0),
            blink_rate=15.0,
            yawn_detected=False,
            microsleep_detected=False,
            timestamp=datetime.now()
        )
        
        print("ðŸš— Driver Monitoring System initialized successfully!")
        print("âœ… Using MediaPipe - NO external model files needed!")
        print("ðŸŽ¥ Camera ready for monitoring...")
    
    def _setup_flask_app(self):
        """Initialize Flask application for emergency web interface"""
        self.flask_app = Flask(__name__, 
                              static_folder='static',
                              template_folder='static')
        
        @self.flask_app.route('/')
    
    def emergency_map():
            """Serve the emergency map page"""
            try:
                return render_template('azure_map.html')
            except Exception as e:
                return f"Error loading emergency map: {e}"
        
    @self.flask_app.route('/status')
    def get_status():
            """API endpoint to get current driver status"""
            return {
                'consciousness_level': self.current_state.consciousness_level,
                'confidence': self.current_state.confidence,
                'timestamp': self.current_state.timestamp.isoformat(),
                'emergency_active': True
            }
    
    def _setup_flask_app(self):
        """Initialize Flask application for emergency web interface"""
        self.flask_app = Flask(__name__, 
                          static_folder='static',
                          template_folder='static')
    
    @self.flask_app.route('/')
    def emergency_map():
        """Serve the emergency map page"""
        try:
            return render_template('azure_map.html')
        except Exception as e:
            return f"Error loading emergency map: {e}"
    
    @self.flask_app.route('/status')
    def get_status():
        """API endpoint to get current driver status"""
        return {
            'consciousness_level': self.current_state.consciousness_level,
            'confidence': self.current_state.confidence,
            'timestamp': self.current_state.timestamp.isoformat(),
            'emergency_active': True
        }
    
    # Suppress Flask logging for cleaner output
    import logging
    flask_log = logging.getLogger('werkzeug')
    flask_log.setLevel(logging.ERROR)
